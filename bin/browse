#!/usr/bin/env -S deno run --allow-run
import { exec } from "https://deno.land/x/exec/mod.ts";

/**
 * A port of "powersearch" 0.2 to Deno.
 *
 * Version History:
 * -----------------------------------------------
 * | 0.2.1 |  6/26/2021 | * use URLSearchParams to serialize URL
 * -----------------------------------------------
 * | 0.2.0 |  6/26/2021 | * --big to look for big images
 * |       |            | * initial DuckDuckGo support
 * |       |            | * use DDG for "lucky" feat
 * -----------------------------------------------
 * | 0.1.0 |  6/25/2021 | * Initial import based on
 * |       |            |   powersearch 0.2 rework
 * |       |            | * change to unsafe by default
 *
 * @see why use DuckDuckGo https://stackoverflow.com/a/64861546/270302
 * @see original work      https://dra.vin/#/bookmarklets
 */

const t = prompt("Where you off to?");
let unsafe = true;
let isBig = false;
const tri = function(o) {
	return new RegExp("^" + o, "i").test(t)
}

let trim = t.replace(/--\S+/g, "").replace(/^\s*\S+\s*/, "");

const  gs = "http://google.com/search?q=";
const get = function(t) {
	const i = ["images", "news", "maps"][t];
	let e = "http://" + i + ".google.com/" + i;
	const isBing = 3 == t;
	const isDDG = 4 == t;
	isBing && (e = "https://images.bing.com/");
	isDDG && (e = "https://duckduckgo.com/");
	let params = new URLSearchParams();
	if (unsafe) {
		if (isDDG) {
			params.set("kp", "-2");
		} else if(isBing) {
			params.set("safesearch", "off");
		} else { // assume google
			params.set("safe", "images");
		}
	}
	if (isDDG) {
		params.set("iax", "images");
		params.set("ia", "images");
	}
	if (isBig) {
		if (isBing) {
			params.set("qft", "+filterui:imagesize-custom_1920_1080");
		} else if(isDDG) {
			params.set("iaf", "size:Large");
		} else { // assume google
			params.set("tbs", "isz:lt,islt:2mp");
		}
	}
	params.set("q", trim);
	goto(e, "?" + params.toString());
};

const goto = async function(e = "http://www.", t = trim) {
	const executor = unsafe ? `firefox -private-window` : "xdg-open";
	const line = `${executor} "${e + t}"`;
	console.log("running", line);
	await exec(line);
};

const e = t.match(/--\S+/g) || [];
for (let i = 0; i < e.length; i++) switch (e[i]) {
	// TBD: plumb context from the page
	case "--this":
		trim += " site:" + document.domain;
		continue;
	case "--safe":
		unsafe = false;
		continue
	case "--big":
		isBig = true;
		continue
}

if (tri("gi")) {
	get(0);
} else if(tri("gn")) {
	get(1);
} else if (tri("gm")) {
	get(2);
} else if(tri("bi")) {
	get(3);
} else if(tri("di")) {
	get(4);
} else if(tri("gs")) {
	goto("https://google.com/search?q=");
} else if( tri("slang")) {
	goto("https://urbandictionary.com/define.php?term=")
} else if(tri("yt")) {
	goto("https://youtube.com/results?search_query=")
} else if(tri("wiki")) {
	goto("https://google.com/search?btnI&q=site:wikipedia.org ");
} else if(tri("imdb")) {
	//goto("https://google.com/search?btnI&q=imdb ")
	goto("https://duckduckgo.com/?q=%5Cimdb ");
} else if(tri("(first|lucky)")) {
	//goto("https://google.com/search?btnI&q=");
	goto("https://duckduckgo.com/?q=%5C");
} else if( tri("ebook")) {
	goto(gs + encodeURIComponent('-inurl:htm -inurl:html intitle:index of("/ebooks"|"/book") (chm|pdf|zip) Last Modified '));
} else if(tri("music")) {
	goto(gs + encodeURIComponent("intitle:index.of last modified  parent directory (mp4|m4a|mp3|wma|ogg) -htm -html -php -asp "));
} else if(tri("torrents?")) {
	goto("https://www.thepiratebay.org/search/", trim + "/0/7/0");
}

